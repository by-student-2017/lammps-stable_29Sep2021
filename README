----------------------------------------------------------------------
COUPLE

I made the following code work on ubuntu 22.04 LTS (lammps_dftb may also work on 24.04 LTS depending on the python2 environment). The version of DFTB+ used is 23.1. These utilize file input and output.

lammps_dftb: We have improved the "atomic_style" to use "charge" in anticipation of use in battery materials. It is not difficult to create the input file using Ovito.

fortran_dftb: This example code only allows one atomic species, so "simple.f90" will need to be modified for more complex structures.

lammps_nwchem: We have improved the "atomic_style" to use "charge" in anticipation of use in battery materials. Change the "lammps_nwchem" from lammps-29Oct20 (lammps-29Oct2020.tar.gz). I haven't tried it, but it's highly likely that it will work with lammps-29Oct20 as well. It may also work with the latest lammps version that officially includes "lammps_nwchem" (I haven't tried it).

Although it depends on the GPU and environment, OpenMP may perform faster calculations. Therefore, it is a good idea to consider using DFTBP (https://github.com/by-student-2017/DFTBP).

Note: version older than stable_23Jun2022 (The reason is "enhancements and additions for the MDI package. This obsoletes the MESSAGE package.")

Note: https://github.com/lammps/lammps/releases/tag/stable_29Sep2021 (The most stable version where messages are available)

Note: (modified) lammps-couple/src/MESSAGE (fix_client_md.cpp:Line 36 & void FixClientMD::receive_fev(int vflag), and server_md.cpp:Line 40)

----------------------------------------------------------------------
This directory has examples of how to use LAMMPS as a library, either
by itself or in tandem with another code or library.

These examples is meant to illustrate what is possible when coupling
codes or calling LAMMPS as a library.  The examples are provided for
demonstration purposes.  The physics they calculate is too simple to
model a realistic problem.

In many of the examples included here, LAMMPS must first be built as a
library.

See these sections of the LAMMPS manual for details:

Build LAMMPS as a library (doc/html/Build_basics.html)
Link LAMMPS as a library to another code (doc/html/Build_link.html)
Coupling LAMMPS to other codes (doc/html/Howto_couple.html)
Using LAMMPS in client/server mode (doc/html/Howto_client_server.html)
Library interface to LAMMPS (doc/html/Howto_library.html)

The library interface to LAMMPS is in src/library.cpp.  Routines can
be easily added to this file so an external program can perform the
LAMMPS tasks desired.

-------------------------------------------------------------------

These are the sub-directories included in this directory:

simple              simple example of driver code calling LAMMPS as a lib
multiple            example of driver code calling multiple instances of LAMMPS
plugin              example for loading LAMMPS at runtime from a shared library
lammps_mc           client/server coupling of Monte Carlo client 
                      with LAMMPS server for energy evaluation
lammps_nwchem       client/server coupling of LAMMPS client with 
                      NWChem quantum DFT as server for quantum forces
lammps_quest        MD with quantum forces, coupling to Quest DFT code
lammps_spparks      grain-growth Monte Carlo with strain via MD,
                    coupling to SPPARKS kinetic MC code
lammps_vasp         client/server coupling of LAMMPS client with 
                      VASP quantum DFT as server for quantum forces
library             collection of useful inter-code communication routines
fortran             a simple wrapper on the LAMMPS library API that
                      can be called from Fortran
fortran2            a more sophisticated wrapper on the LAMMPS library API that
                      can be called from Fortran
fortran_dftb        wrapper written by Nir Goldman (LLNL), as an
                      extension to fortran2, used for calling LAMMPS
                      from Fortran DFTB+ tight-binding code

Each sub-directory has its own README with more details.
